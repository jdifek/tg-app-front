"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { ArrowLeft, Star } from "lucide-react";
import { apiFetch } from "@/app/http";
import { toast } from "react-hot-toast";
import { useState, useEffect, Suspense } from "react";

export const dynamic = "force-dynamic"; 

function StarsPayPageContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [starsPrice, setStarsPrice] = useState<number>(0);

  // —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const priceUSD = searchParams.get("price")
    ? parseFloat(searchParams.get("price")!)
    : 0;

  // –∫—É—Ä—Å Stars ‚Üí USD
  const USD_TO_STARS = 100; // 1 USD ‚âà 100 Stars

  useEffect(() => {
    setStarsPrice(Math.round(priceUSD * USD_TO_STARS));
  }, [priceUSD]);

  const handleTelegramPay = async () => {
    try {
      console.log("–°–æ–∑–¥–∞—ë–º —Å—á—ë—Ç –Ω–∞ Stars...", starsPrice);
  
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram WebApp –∏–ª–∏ —Ñ–æ–ª–±–µ–∫ –∏–∑ URL
      let tg = window.Telegram?.WebApp;
  
      if (!tg) {
        console.warn("Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ URL...");
  
        const hash = window.location.hash;
        const params = new URLSearchParams(hash.replace("#", ""));
        const tgWebAppData = params.get("tgWebAppData");
  
        if (tgWebAppData) {
          const decodedData = decodeURIComponent(tgWebAppData); // %7B -> {
          const dataParams = new URLSearchParams(decodedData);
          const userParam = dataParams.get("user");
  
          if (userParam) {
            // –ò–Ω–æ–≥–¥–∞ Telegram —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ—à–∏, –ø–æ—ç—Ç–æ–º—É decodeURIComponent –¥–≤–∞–∂–¥—ã
            const userFromUrl = JSON.parse(decodeURIComponent(userParam));
            if (userFromUrl) {
              console.log("–ù–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ URL:", userFromUrl);
  
              // –°–æ–∑–¥–∞—ë–º –º–æ–∫-–æ–±—ä–µ–∫—Ç WebApp —Å openInvoice
              tg = {
                openInvoice: (invoiceId: string, callback: (status: string) => void) => {
                  console.log("–§–æ–ª–±–µ–∫ openInvoice –¥–ª—è invoiceId:", invoiceId);
                  // –û—Ç–∫—Ä—ã–≤–∞–µ–º invoice_url –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                  window.open(`https://t.me/${invoiceId}`, "_blank");
                  // –î–ª—è —Ç–µ—Å—Ç–∞ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º paid
                  setTimeout(() => callback("paid"), 1000);
                },
              } as any;
            }
          }
        }
      }
  
      if (!tg) {
        toast.error("Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram WebApp –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ URL");
        return;
      }
  
      const res = await apiFetch("/api/orders/stars", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
          description: `–ü–æ–∫—É–ø–∫–∞ –∑–∞ ${starsPrice} Stars`,
          amount: starsPrice,
        }),
      });
  
      const data = await res.json();
      console.log("–î–∞–Ω–Ω—ã–µ —Å—á—ë—Ç–∞:", data);
  
      if (!data.invoice_url) {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç");
        console.error("invoice_url –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API");
        return;
      }
  
      const invoiceId = data.invoice_url.split("/").pop();
      if (!invoiceId) {
        toast.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—á—ë—Ç");
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å invoiceId –∏–∑ invoice_url");
        return;
      }
  
      console.log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram WebApp...");
      tg.openInvoice?.(invoiceId, async (status: string) => {
        console.log("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", status);
  
        if (status === "paid") {
          toast.success("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚≠ê");
  
          const orderId = searchParams.get("orderId");
          if (!orderId) return;
  
          console.log("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è orderId:", orderId);
          const confirmRes = await apiFetch(`/api/orders/${orderId}/payment-status`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ paymentStatus: "CONFIRMED" }),
          });
  
          if (!confirmRes.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏");
          router.push("/");
        } else if (status === "cancelled") {
          toast("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω ‚ùå");
        } else if (status === "failed") {
          toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ");
        }
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ handleTelegramPay:", err);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞");
    }
  };
  
  

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-indigo-900 to-black text-white">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-800">
        <button
          onClick={() => router.back()}
          className="p-2 hover:bg-gray-800 rounded-lg transition-colors"
        >
          <ArrowLeft className="w-6 h-6 text-white" />
        </button>
        <h1 className="text-xl font-bold flex items-center gap-2">
          Stars
          <Star className="w-5 h-5 text-yellow-400" />
        </h1>
        <div className="w-10" />
      </div>

      {/* Content */}
      <div className="max-w-md mx-auto p-5">
        <div className="bg-gray-900 bg-opacity-50 border border-indigo-500 rounded-2xl p-5">
          <h2 className="text-lg font-semibold text-indigo-400 mb-3">
            –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:{" "}
            <span className="text-white">
              {starsPrice} ‚≠ê ({priceUSD}$)
            </span>
          </h2>

          <ul>
            <li>üí´ –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars</li>
            <li>üí´ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –≤ Telegram"</li>
            <li>üí´ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –Ω–∏–∂–µ</li>
          </ul>

          <p className="text-yellow-400 font-semibold mt-3">
            * Stars —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å –≤–∞—à–µ–≥–æ Telegram Wallet
          </p>
        </div>

        {/* Pay Button */}
        <button
          onClick={handleTelegramPay}
          className="w-full mt-5 bg-indigo-600 hover:bg-indigo-700 rounded-xl py-3 font-semibold text-white transition"
        >
          –û–ø–ª–∞—Ç–∏—Ç—å Stars ‚≠ê
        </button>
      </div>
    </div>
  );
}

export default function StarsPayPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-black via-indigo-900 to-black flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    }>
      <StarsPayPageContent />
    </Suspense>
  );
}